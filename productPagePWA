Here's a complete **Progressive Web App (PWA)** for a **Product Page** that:

- Displays multiple products with image, name, price, quantity.
- Uses a `manifest.json` for app-like installability.
- Includes a `service-worker.js` to cache resources and work offline.

---

## 📁 File Structure

```
product-pwa/
├── index.html
├── styles.css
├── app.js
├── manifest.json
├── service-worker.js
└── images/
    ├── product1.jpg
    ├── product2.jpg
    └── product3.jpg
```

---

## 🧾 `index.html`

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Product Page PWA</title>
  <link rel="stylesheet" href="styles.css" />
  <link rel="manifest" href="manifest.json" />
  <meta name="theme-color" content="#4CAF50" />
</head>
<body>
  <h1>Product Store</h1>
  <div id="product-container" class="product-grid"></div>

  <script src="app.js"></script>
  <script>
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('service-worker.js')
        .then(() => console.log('Service Worker Registered'));
    }
  </script>
</body>
</html>
```

---

## 🎨 `styles.css`

```css
body {
  font-family: sans-serif;
  margin: 0;
  padding: 20px;
  background: #f0f0f0;
}

h1 {
  text-align: center;
  color: #4CAF50;
}

.product-grid {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
  justify-content: center;
}

.product-card {
  background: white;
  padding: 10px;
  border-radius: 10px;
  width: 220px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

.product-card img {
  width: 100%;
  border-radius: 5px;
}

.product-card h2 {
  font-size: 18px;
  margin: 10px 0 5px;
}

.product-card p {
  margin: 4px 0;
}
```

---

## 📦 `app.js`

```javascript
const products = [
  { name: "Laptop", price: 999, quantity: 10, image: "images/product1.jpg" },
  { name: "Phone", price: 499, quantity: 25, image: "images/product2.jpg" },
  { name: "Headphones", price: 149, quantity: 40, image: "images/product3.jpg" }
];

const container = document.getElementById("product-container");

products.forEach(product => {
  const card = document.createElement("div");
  card.className = "product-card";
  card.innerHTML = `
    <img src="${product.image}" alt="${product.name}" />
    <h2>${product.name}</h2>
    <p>Price: $${product.price}</p>
    <p>Quantity: ${product.quantity}</p>
  `;
  container.appendChild(card);
});
```

---

## 🌐 `manifest.json`

```json
{
  "name": "Product Page PWA",
  "short_name": "Products",
  "start_url": "./index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#4CAF50",
  "icons": [
    {
      "src": "images/product1.jpg",
      "sizes": "192x192",
      "type": "image/jpeg"
    }
  ]
}
```

---

## 🛡️ `service-worker.js`

```javascript
const cacheName = "product-pwa-v1";
const filesToCache = [
  "/",
  "/index.html",
  "/styles.css",
  "/app.js",
  "/manifest.json",
  "/images/product1.jpg",
  "/images/product2.jpg",
  "/images/product3.jpg"
];

self.addEventListener("install", event => {
  event.waitUntil(
    caches.open(cacheName).then(cache => {
      return cache.addAll(filesToCache);
    })
  );
});

self.addEventListener("fetch", event => {
  event.respondWith(
    caches.match(event.request).then(response => {
      return response || fetch(event.request);
    })
  );
});
```

---

## 🚀 How to Run

1. Serve with a local server (e.g., Python):
   ```bash
   python -m http.server
   ```
2. Visit `http://localhost:8000`
3. Open DevTools > Lighthouse > PWA to test installability

---

Would you like me to bundle this into a downloadable `.zip` for you with the images and everything?
